; types: char, short, int, long, *type
; declaration:
;     global <type> <name>
;     local  <type> <name>
;     :<label>
; statement:
;     <declaration>
;     if <term> <==/</>/>=/<=/!=> <term> goto <label>   NOTE: this uses signed comparisons
;     goto <label>
;     <lvalue> = <rvalue>
;     <lvalue> += <rvalue>
;     <lvalue> -= <rvalue>
;     <function>(<term>, <term>, ...)
;     syscall(<term>, <term>, ...)
;     return <rvalue>
;     byte <number>
; term:
;     <var>
;     <number>
; number:
;     'c
;     12345
;     0xabc
; lvalue:
;     <var>
;     *<var>
;     <var>[<term>]
; rvalue:
;     `<string>`
;     <var>
;     &<var>
;     *<var>
;     <var>[<term>]
;     ~<var>
;     <function>(<term>, <term>, ...)
;     syscall(<term>, <term>, ...)
;     <term> + <term>
;     <term> - <term>
;    NOTE: *, /, % are signed (imul and idiv)
;     <term> * <term>
;     <term> / <term>
;     <term> % <term>
;     <term> & <term>
;     <term> | <term>
;     <term> ^ <term>
;     <term> < <term>  (left shift)
;     <term> > <term>  (unsigned right shift)

main() ; hello

global char x
global short y ;123
global long z

:strlen
function
	argument *char s
	local long len
	local char c
	len = 0
	:strlen_loop
	c = s[len]
	if c == 0 goto strlen_loop_end
	len += 1
	goto strlen_loop
	:strlen_loop_end
	return len

:putc
function
	argument char c
	local *char p
	p = &c
	syscall(1, 1, p, 1, 0, 0, 0, 0)
	return

:puts
function
	argument *char s
	local long len
	len = strlen(s)
	syscall(1, 1, s, len, 0, 0, 0, 0)
	return

:main
function
	local *char hello
	hello = `Hello, world!
`
	puts(hello)
	syscall(0x3c, 0, 0, 0, 0, 0, 0, 0)


:f
function
	argument *long x
	argument *long y
	local long v
	local *long p
	v = *x
	p = *y
	*p = v
	if v == 0 goto something
	p[1] = v + 1
	return p[2]
	:something
	return p[1]
