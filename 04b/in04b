; declaration:
;     global <type> <name>
;     local  <type> <name>
;     :<label>
; statement:
;     <declaration>
;     if <term> <==/</>/>=/<=/!=> <term> goto <label>   NOTE: this uses signed comparisons
;     goto <label>
;     <lvalue> = <rvalue>
;     <lvalue> += <rvalue>
;     <lvalue> -= <rvalue>
;     <function>(<term>, <term>, ...)
;     syscall <term> <term> ...
;     return <rvalue>
;     byte <number>
; term:
;     <var>
;     <number>
; number:
;     'c
;     12345
;     0xabc
; lvalue:
;     <var>
;     *<var>
;     <var>[<term>]
; rvalue:
;     `<string>`
;     <var>
;     &<var>
;     *1 <var> / *2 <var> / *4 <var> / *8 <var>
;     <var>[<term>]
;     ~<var>
;     <function>(<term>, <term>, ...)
;     syscall <term>, <term>, ...
;     <term> + <term>
;     <term> - <term>
;    NOTE: *, /, % are signed (imul and idiv)
;     <term> * <term>
;     <term> / <term>
;     <term> % <term>
;     <term> & <term>
;     <term> | <term>
;     <term> ^ <term>
;     <term> < <term>  (left shift)
;     <term> > <term>  (unsigned right shift)

main() ; hello

global x
global y ;123
global z

:strlen
function
	argument s
	local len
	local c
	local p
	len = 0
	:strlen_loop
	p = s + len
	c = *1 p
	if c == 0 goto strlen_loop_end
	len += 1
	goto strlen_loop
	:strlen_loop_end
	return len

:putc
function
	argument c
	local p
	p = &c
	syscall 1 1 p 1 0 0 0 0
	return

:puts
function
	argument s
	local len
	len = strlen(s)
	syscall 1 1 s len 0 0 0 0
	return

:main
function
	local hello
	hello = `Hello, world!
`
	puts(hello)
	syscall 0x3c 0 0 0 0 0 0 0


:f
function
	argument x
	argument y
	local v
	local p
	v = *4x
	p = *8y
	*4p = v
	if v == 0 goto something
	*1p = v + 1
	return *2p
	:something
	return *4p
